vins_mono学习
	基于非线性优化的vio融合定位方案
参考网址:
	https://blog.csdn.net/lzm89757/article/details/129765752?ops_request_misc=&request_id=&biz_id=102&utm_term=vins_mono&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-129765752.142^v88^insert_down38v5,239^v2^insert_chatgpt&spm=1018.2226.3001.4187
代码仓库:
	https://github.com/HKUST-Aerial-Robotics/VINS-Mono
代码流程:
	1. 预处理模块
		1. 视觉: 特征点提取, 跟踪与去畸变
			提取特征点:
				1. 使用光流追踪提取特征点
				2. 使用图像金字塔避免陷入局部最优
			提高特征点质量:
				1. 根据对极约束, 使用ransac构建本质矩阵, 剔除外点
				2. 点云均匀化, 对追踪次数排序, 追踪次数最多的一定量特征点保存, 并且其周围不孕寻存在其他特征点
				3. 提取新的特征点用于补充由于外点剔除与均匀化操作导致的特征点数量减少问题
			畸变矫正: 逐次逼近去畸变
				1. 预设畸变模型
				2. 估计畸变参数: 使用即便模型与已知矫正掉, 在图像中找到对应畸变点, 利用他们估计畸变参数
				3. 畸变矫正: 使用估计畸变参数, 对整个图像进行矫正. 
				4. 评估畸变矫正效果: 通过校正后的图像与预期无畸变图像进行对比
				5. 更新畸变参数: 根据评估结果, 更新畸变模型参数, 并迭代, 直到满意
			关键帧选择:
				1. 视差: 特征像素差超出阈值
				2. 追踪特征点明显太少
		2. imu: 惯性解算与误差分析, 计算预积分
			上一帧关键帧与当前时间的预积分, 用于图优化, 便于更新imu状态, 不需要重复做积分操作, 简化运算
	2. 初始化模块(优秀的初值便于之后的GN或者LM求解, 防止陷入局部最优)
		1. 旋转外参标定 
			将两帧陀螺仪积分乘外参与两针图像对极约束乘旋转外参建等式关系，利用多帧数据构建超定方程AX=0，进行SVD分解求出旋转外参
		2. sfm, 基于图像的三维重建, 纯单目slam
			1. 枢纽帧不能太近也不能太远(太近容易造成解的奇异性, 太远匹配特侦点太少, 置信度不高)
			2. 枢纽帧与最后一帧构建对极约束, 三角化求解地图点
			3. 其他帧通过重投影误差求解PnP, 再次三角化出地图点
			4. 将10帧求解出来的位姿作为初值, 构建BA优化, 求解置信度更高的位姿与地图点
		3. 陀螺仪零偏估计
			0. 零偏建模方式为预积分量对零偏的一阶泰勒展开
			1. 根据BA求解的位姿与外参作为准确值, 与imu预积分量做对比, 将零偏作为优化变量最小化视觉与imu两帧位姿变化误差, 求解零偏
			2. 初始化时零偏为零, 计算出零偏变化较大, 预积分量需要重新传播, 滑窗优化时, 零偏变化量较小, 可通过零偏建模公式将零偏变化量补偿到预积分量中
		4. 视觉惯性对齐
			每一帧图像位姿与imu预积分构建等式i, 求解线性方程, 求各帧速度, 尺度, 枢纽帧重力
		5. 利用重力先验修正重力
			重力可以通过查表获得先验, vins认为重力大小是准确的, 故只需要优化重力方向, 将重力方向分解为切平面的两个正交单位向量, 优化两单位向量的权重, 从而改变重力方向
	3. 基于滑窗非线性优化:	
		1. 预积分约束
			1. 两帧之间的位姿, 速度, 姿态, 零偏
		2. 视觉重投影约束
			1. 使用你深度建模, 3d点降为1个自由度的深度, 求解速度更快
			2. 优化变量: 位姿, 相机与imu外参, 逆深度
			3. 雅各比求导: 采用链式求导法则, 优化调整位姿时, 注意固定滑窗中最老帧位姿, 防止零空间漂移(可观测维度降维导致)
		3. 边缘化约束
			1. 边缘化掉最老关键帧(预积分约束的第0,1帧位姿与零偏, 重投影约束第0帧与其他帧外参逆深度)
			2. 使用舒尔补实现边缘化 (1, 原本无关边缘化后相关; 2, fill_in使得稀疏矩阵变得稠密)
			3. 边缘化掉所有地图点, 残差变大时, 要使当前状态量尽可能接近边缘化时状态量
	4. 回环检测
		1. 检测回环 : 词库模型检测回环点
		2. 校验回环 : 通过描述子与几何进一步确认
			1. 通过描述子对比汉明距离
			2. 使用ransac求解pnp. 点数大于阈值, 认为回环
		3. 构建回环约束 : 加入回环帧约束